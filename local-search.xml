<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NJU-PA</title>
    <link href="/2024/01/03/NJU-PA/"/>
    <url>/2024/01/03/NJU-PA/</url>
    
    <content type="html"><![CDATA[<h1 id="nju-pa">NJU-PA</h1><h2 id="一-学习记录">一 学习记录</h2><h4 id="gdb的使用">1 GDB的使用</h4><ul><li>开始<ul><li>编译c代码，添加<code>-g</code>选项表明要使用gdb调试，<code>gcc -g -o test test.c</code></li><li>调试某程序，<code>gdb test</code></li><li><code>set &lt;args&gt;</code>，在run之前，为test传参，等于<code>test &lt;args&gt;</code></li></ul></li><li>查看代码（<code>list</code>或者<code>l</code>）<ul><li><code>l</code>，列出程序代码（连续执行会接着上一次命令输出）</li><li><code>l &lt;num&gt;</code>，展示<num>为中心10行代码</li><li><code>l &lt;funName&gt;</code>，展示函数<funName>的代码</li></ul></li><li>断点设置（<code>break</code>或<code>b</code>）<ul><li><code>b &lt;fileName&gt;:&lt;num&gt;</code>，<fileName>文件的在第<num>行设置断点</li><li><code>b &lt;funName&gt;</code>，在函数<funName>打断点</li><li><code>info b</code>，查看断点</li><li><code>delete b</code>，删除断点；<code>delete breakpoints</code>，删除所有断点</li><li><code>enable/disable b</code>，启用/禁用断点</li></ul></li><li>程序执行<ul><li><code>r</code>，运行代码（没有断点就运行完）</li><li><code>c</code>，执行到下一个断点处</li><li><code>n</code>，单步执行，不进入函数</li><li><code>s</code>，单步执行，进入函数</li><li><code>finish</code>，执行完当前函数</li><li><code>until &lt;num&gt;</code>，执行到<num>行</li></ul></li><li>其他<ul><li><code>p x</code>，输出变量；<code>set x=1</code>，设置变量</li><li><code>info registers</code>，打印寄存器的值</li><li><code>x/[n\]\[f]\[u] EXPR</code>，查看内存<EXPR>位置的值，n是单元数，f是格式（例如x，o），u是单元单位（例如b=byte，h=2*byte）</li></ul></li></ul><h4 id="macro-magic-检测宏是否被定义">2 Macro magic检测宏是否被定义</h4><ul><li><p>基础知识</p><ul><li><p>直接使用ifdef，<code>#ifdef xxx #endif</code></p></li><li><p><code>"" #marco</code>，#表示将后面跟着的宏转为字符串，紧连的两个字符串会被拼接</p></li><li><p><code>a ## b</code>，将两个宏拼接起来</p></li><li><p>在有<code>#</code>和<code>##</code>的地方，宏不会展开</p></li></ul></li><li><p>基本思路</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> str_temp(x) #x</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> str(x) str_temp(x)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISDEF(macro) (strcmp(<span class="hljs-string">&quot;&quot;</span> #macro, <span class="hljs-string">&quot;&quot;</span> str(macro)) != 0) </span><br><span class="hljs-comment">// 前者不会展开，直接就是macro，后者把macro展开成对应的定义，如果两者不同，这宏被定义了</span><br></code></pre></td></tr></table></figure><ul><li>NEMU实现<ul><li>问题一：ISDEF得到的是0，1，不是True，False</li><li>问题二：ISDEF调用了函数，不能直接得到0，1</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 不难解释，通过PREFIX_1和_0，我们将TRUE和FALSE函数引入了宏中</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> concat(a,b) a ## b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MUX(a, b, sel) sel(a, b)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MUX_MID(a, b, p, sel) MUX(a, b, concat(p, sel))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MUX_OUT(a, b, sel) MUX_MID(a, b, PREFIX_, sel)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TRUE(a, b) a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> False(a, b) b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREFIX_1(a, b) TRUE(a, b)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREFIX_0(a, b) FALSE(a, b)</span><br><br><span class="hljs-comment">// 利用逗号，实现返回0，1的操作</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> choose2nd(a, b, ...) b</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PREFIX_t t,</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> choose2nd_mid(p_macro, a, b) choose2nd(p_macro a, b)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> choose2nd_out(macro, a, b) choose2nd_mid(concat(PREFIX_, macro), a, b)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IFDEF(macro) choose2nd_out(macro, 1, 0)</span><br></code></pre></td></tr></table></figure><h4 id="staticvolatileextern的作用">3 static/volatile/extern的作用</h4><ul><li><p>static</p><ul><li><p>隐藏，static修饰的变量或者函数只在当前文件可见</p></li><li><p>内容持久，static的变量在程序开始时初始化，存储在静态存储区</p></li><li><p>默认初始化，static的变量默认初始化为0</p></li></ul></li><li><p>volatile</p><ul><li>volatile和const对应，指出修饰的变量可能被其他地方改变，所以每次都需要重新读取</li></ul></li><li><p>extern</p><ul><li>修饰的变量可以直接在其他文件中引用</li></ul></li></ul><h4 id="how-debuggers-work">4 How debuggers work</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-title function_">ptrace</span><span class="hljs-params">(<span class="hljs-keyword">enum</span> __ptrace_request request, <span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span> *addr, <span class="hljs-type">void</span> *data)</span>;<br></code></pre></td></tr></table></figure><ul><li>基本操作<ul><li>fork出一个子进程，然后子进程执行<code>ptrace(PTRAC_TRACEME, 0, 0, 0)</code>让父进程trace自己</li><li>父进程wait子进程的执行，子进程会在excel的程序的第一条指令停止</li><li>父进程调用<code>ptrace(PTRACE_SINGLESTEP, child_pid, 0, 0)</code>单步执行</li><li>也可以调用<code>ptrace(PTRACE_GETREGS, pid, 0, &amp;reg)</code>获取寄存器</li><li>也可以调用<code>ptrace(PTRACE_PEEKTEXT, pid, regs.eip, 0)</code>获取当前指令</li></ul></li><li>Breakpoint<ul><li>断点的实现其实就是将<code>int 3</code>写到需要打断点的汇编代码的第一个字节</li><li><code>int 3</code>正好是一个字节，可以写入到任何一字节或多字节的指令的第一个字节处</li></ul></li></ul><h4 id="统计代码行数">5 统计代码行数</h4><p><code>find . -type -f -name "\*.c" -o -name "\*.h" | xagrs cat | grep -v '^\s*$' | wc -l</code></p><h4 id="make的使用">6 Make的使用</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">%.o : %.c<br><span class="hljs-variable">$(CC)</span> -o <span class="hljs-variable">$@</span> <span class="hljs-variable">$&lt;</span><br>    @<span class="hljs-comment"># comment</span><br>    <br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><span class="hljs-section">clean:</span><br>rm *.o<br></code></pre></td></tr></table></figure><ul><li><p>语法</p><ul><li>make会默认打印每条命令，在前面加<code>@</code>取消回声</li><li><code>%.o : %.c</code>模式匹配文件夹下的所有.c文件</li><li>判断<ul><li><code>ifeq ($(CC), gcc)   xxxx  else  xxxx  endif</code></li></ul></li></ul></li><li><p>变量</p><ul><li><code>VAR = value</code> 允许递归扩展</li><li><code>VAR := value</code>在定义时展开</li><li><code>$(value)</code>取变量</li><li>内置变量<ul><li><code>$(MAKECMDGOALS)</code>就是<code>make xxx</code>的xxx</li><li><code>$(CC)</code>当前使用的编译器</li></ul></li><li>自动变量<ul><li><code>$@</code>当前目标</li><li><code>$&lt;</code>第一个依赖</li><li><code>$?</code>需要更新的依赖</li><li><code>$^</code>所有依赖</li></ul></li></ul></li><li><p>函数</p><ul><li><code>src := $(shell echo src/&#123;00..99&#125;.txt)</code>执行shell命令</li><li><code>src := $(wildcard src/*.txt)</code><ul><li>替换通配符</li><li>没有匹配到模式会返回空</li></ul></li><li><code>$(findstring find, in1 in2 in3)</code> 判断in中是否有find</li><li><code>$(info text ...)</code> 打印信息</li><li><code>$(basename src/file.c)</code> 提取除开文件后缀的部分</li><li><code>$(notdir src/file.c)</code><ul><li>提取文件名</li><li>通常有<code>$(base $(notdir src/file.c))</code></li></ul></li><li><code>$(filter pattern...,text)</code>返回text中匹配match的部分（pattern可以是%.c）</li><li><code>$(subst from,to,text)</code>执行替换text中的from会被替换为to</li><li><code>$(word 2, a b c)</code>返回a b c中的第二个</li><li><code>$(flavor variable)</code>检查变量是否被定义（是递归还是非递归定义）<ul><li>返回undefined/recursive/simple</li></ul></li><li><code>$(abspath names...)</code> 返回绝对路径</li><li><code>$(addsuffix .c,foo bar)</code> 添加后缀</li><li><code>$(addprefix src/,foo bar)</code> 添加前缀</li><li><code>$(join a b,.c .o)</code> 返回 a.c b.o</li></ul></li><li><p>其他</p><ul><li><p>用<code>.PHONY:</code>标识伪装目标</p></li><li><p>每行命令在一个单独的shell中执行（可以通过<code>;</code>将多个命令放在一行）</p></li></ul></li></ul><h4 id="git-的使用">7 Git 的使用</h4><ul><li>回退的某个commit <code>git reset --hard &lt;commit&gt;</code></li></ul><h4 id="elf文件">8 ELF文件</h4><ul><li>在Linux系统中，源码编译后的目标文件（.o）、目标文件链接后的可执行文件（.elf）、动态链接库（.so）和静态链接库（.a）都以elf文件的格式存储</li><li>readelf</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">readelf <br>-a a.elf # 显示所有信息<br>-h a.elf # 显示Elf header<br>-l ...   # 显示program header<br>-S ...   # 显示section header<br>-s ...   # 显示符号表中的项<br>-e ...   # 等于-h -l -S<br>-x &lt;number or name&gt;  # 显示段中内容<br></code></pre></td></tr></table></figure><ul><li><p>ELF Header（Elf_Ehdr）</p><ul><li>ELF魔数，elf文件的开头几个字节是（0x7f e l f）</li><li>ELF文件类型（e_type）<ul><li>可重定位文件（ETL_REL），一般为.o文件或.a文件</li><li>可执行文件（ET_EXEC）</li><li>共享目标文件（ET_DYN），一般为.so文件</li></ul></li></ul></li><li><p>ELF Section Header Table（Elf_Shdr的数组）</p><ul><li>节点名（sh_name），保存在字符串表（也是某一节）中，sh_name是在该表中的偏移值</li><li>节类型（sh_type）和节标志位（sh_flag）</li><li>节偏移（sh_offset），表示该节在文件中的偏移</li><li>节链接信息（sh_link/sh_info），如果节和链接有关（如重定位表、符号表）<ul><li>SHT_DYNAMIC，该节使用的字符串表在节头表中的下标</li><li>SHT_HSA，该节使用的符号表在节头表中的下标</li></ul></li><li>节项大小（sh_entsize），如果节包含了一些固定大小的项，则为该项大小，否则为0</li></ul></li><li><p>ELF Sections</p><ul><li><p>text节保存有程序代码指令</p></li><li><p>rodata节保存了只读的数据</p></li><li><p>data节保存了初始化的全局变量等数据</p></li><li><p>dynsym节保存有从共享库导入的动态符号表</p></li><li><p>dynstr节保存了动态链接字符串表</p></li><li><p>symtab节保存了符号信息</p></li><li><p>strtab节保存了符号的字符串（会被symtab引用）</p></li><li><p>符号表（包括dynsym和symtab）中保存Elf_sym数据结构，dynsym是symtab的子集</p></li></ul></li></ul><h4 id="内联汇编">9 内联汇编</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">__asm__(assembler template <br>: output operands                  <span class="hljs-comment">/* optional */</span><br>: input operands                   <span class="hljs-comment">/* optional */</span><br>: <span class="hljs-built_in">list</span> of clobbered registers      <span class="hljs-comment">/* optional */</span><br>);<br><br><span class="hljs-comment">// 例如</span><br>__asm__(<span class="hljs-string">&quot;movl %1, %%eax\n\t&quot;</span><br>    <span class="hljs-string">&quot;movl %%eax, %0\n\t&quot;</span><br>    :<span class="hljs-string">&quot;=r&quot;</span>(b)        <span class="hljs-comment">/* output */</span><br>    :<span class="hljs-string">&quot;r&quot;</span>(a)         <span class="hljs-comment">/* input */</span><br>    :<span class="hljs-string">&quot;%eax&quot;</span>         <span class="hljs-comment">/* clobbered register */</span><br>    );<br></code></pre></td></tr></table></figure><ul><li><code>:"=r"(b)</code>表示把<code>%0</code>寄存器的值传给b</li><li><code>:"r"(a)</code>表示分配<code>%1</code>保存a的值</li><li>为了区分<code>%%eax</code>前面加了两个%</li><li>在执行过程中<code>%eax</code>的值被改变了，所以写在第四格</li></ul><h2 id="二-踩坑记录">二 踩坑记录</h2><h4 id="neovim使用lsp-clangd时无法正确识别include-file.h">1neovim使用lsp clangd时，无法正确识别<code>#include "file.h"</code></h4><ul><li>解决思路：在lsp_config项目中找到clangd的官方网站，发现可以用bear生成complie_commands.json来解决</li><li>具体步骤：<ul><li>下载bear，<code>pacman -S bear</code></li><li>生成complie_commands.json，<code>make clean; bear -- make</code></li></ul></li></ul><h4 id="表达式求值空格一直无法检测">2 表达式求值空格一直无法检测</h4><ul><li>很简单，因为strtok没有把整个表达式提取出来，只提取了第一个空格前面的部分</li></ul><h4 id="pa1.2-测试报错">3 PA1.2 测试报错</h4><ul><li>要先初始化regex。。。</li></ul><h4 id="pa-2.1-符号扩展">4 PA 2.1 符号扩展</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SEXT(x, len) (&#123; struct &#123; int64_t n : len; &#125; __x = &#123; .n = x &#125;; (uint64_t)__x.n; &#125;)</span><br></code></pre></td></tr></table></figure><ul><li>值得注意的是，符号扩展的操作其实是在<code>(uint64_t)__x.n</code>完成的，因为此时__x.n是int64_n类型的变量，在强转为无符号整型前，会自动作符号扩展</li></ul><h4 id="strcmp函数">5 strcmp函数</h4><ul><li>函数返回0表示两个字符串相等</li></ul><h4 id="项目关系">6 项目关系</h4><ul><li>一定牢记 app（软件） -&gt; AM（软件硬件接口） -&gt;NEMU（硬件）</li></ul><h2 id="references">References</h2><ol type="1"><li><ahref="https://eli.thegreenplace.net/2011/01/27/how-debuggers-work-part-2-breakpoints">Howdebuggers work</a></li><li><a href="https://www.bilibili.com/read/cv15072569/">nju-pa摸鱼记</a>(思考记录，无题目讲解)</li><li><ahref="https://stackoverflow.com/questions/26099745/test-if-preprocessor-symbol-is-defined-inside-macro">Testif preprocessor symbol is defined inside macro</a></li><li><a href="https://www.ruanyifeng.com/blog/2015/02/make.html">Make命令教程（阮一峰）</a></li><li><ahref="http://chuquan.me/2018/05/21/elf-introduce/">计算机那些事(4)——ELF文件结构</a></li><li><ahref="https://wangchujiang.com/linux-command/c/readelf.html">readelf</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux使用记录</title>
    <link href="/2023/12/31/Linux-Use/"/>
    <url>/2023/12/31/Linux-Use/</url>
    
    <content type="html"><![CDATA[<h1 id="linux-使用记录">Linux 使用记录</h1><h4 id="终端模拟器和shell-配置">1 终端模拟器和Shell 配置</h4>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim 使用记录</title>
    <link href="/2023/12/27/Vim-Use/"/>
    <url>/2023/12/27/Vim-Use/</url>
    
    <content type="html"><![CDATA[<h1 id="vim-使用记录">Vim 使用记录</h1><blockquote><p>记录在使用vim的过程中遇到的遇到的问题和解决办法，或者想要完成的操作</p></blockquote><h2 id="一-使用技巧">一 使用技巧</h2><h4 id="批量替换">1 批量替换</h4><p>推荐阅读：<ahref="https://vegastack.com/tutorials/find-and-replace-in-vim-vi/">Findand Replace in Vim/Vi</a></p><ul><li>基础操作</li></ul><p>替换命令的格式为<code>:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags] [count]</code></p><p>表示将<code>[range]s</code>中的每一行符合<code>&#123;pattern&#125;</code>的字符串替换为<code>&#123;string&#125;</code>，并重复该操作<code>[count]</code>次，在未指定<code>[range]</code>和<code>[count]</code>是默认在当前行执行一次，例如有如下操作</p><p><code>:s/foo/bar</code>将当前行的foo替换为bar</p><ul><li>常用操作</li></ul><p><code>:%s/foo/bar/gci</code>将整个文件中的foo替换为bar，其中<code>%</code>表示在整个文件中搜索，<code>g</code>表示处理每一个匹配到的字符串，<code>c</code>表示需要确认，<code>i</code>表示大小写不敏感</p><p><code>:.,+4s/foo/bar/g</code>将当前行后面4行的foo替换为bar，<code>.</code>表示当前行，<code>+4</code>表示后面四行</p><p><code>:s/\&lt;foo\&gt;/bar/</code>表示将foo这个单词替换为bar，<code>&lt;foo&gt;</code>表示搜索单词</p><p><code>:s</code>可以进入substitute的历史记录</p><p><code>:%s/\s+$//e</code>表示删除每行的末尾空格，<code>e</code>表示没有搜索到也不报错，<code>\s</code>在正则表达式中表示空格</p><h4 id="多行操作visual-mode">2 多行操作（Visual mode）</h4><p>推荐阅读：<ahref="https://dev.to/iggredible/mastering-visual-mode-in-vim-15pl">MasteringVisual Mode in Vim</a></p><blockquote><p>Visual mode can be useful if you want to target a specific group oftext that doesn't follow distinguishable pattern.</p></blockquote><ul><li>进入visual mode</li></ul><p>Vim的visualmode有三种模式，通过输入：<code>v</code>进入字符模式，<code>V</code>进入行模式，<code>Ctrl-v</code>进入块模式</p><p>在块模式下，vim允许使用者按照行列来选取一个块</p><p><code>gv</code>可以进入上一次进入的visual模式，并保持上一次选取的内容</p><p><code>o</code>在visualmode中移动光标到选中部分的开始或结尾，而不改变选中部分</p><ul><li>visual mode下的操作</li></ul><p>在选择需要操作的部分后，可以执行如下操作：<code>u</code>变为小写，<code>U</code>变为大写，<code>d</code>删除，<code>c</code>改变，<code>y</code>复制，<code>&gt;</code>缩进，<code>&lt;</code>回缩，<code>ctrl-a/ctrl-x</code>用于增加或者减少光标选中的数字</p><p>excommand（例如subsitute命令）在visual模式下，会默认在选中部分执行</p><p><code>.</code>表示重复上一次操作</p><p>在块模式下，选中要操作的多个行后，键入<code>A</code>或者<code>I</code>进行输入，然后推出visualmode，该输入操作会在选中的每个行复制</p><p>在insert mode下，可以通过<code>ctrl-o + command</code>执行normalmode下的命令，例如<code>ctrl-o v</code>可以进入visual mode</p><ul><li>select mode</li></ul><p>可以通过<code>gh gH gCtrl-h</code>进入和visual mode相同的几个selectmode，在selectmode下，和正常的文本编辑器类似，可以直接输入某个字符替换选中的部分</p><h2 id="二-配置和插件">二 配置和插件</h2><h4 id="插件管理">1 插件管理</h4><ul><li>安装</li></ul><p>使用<ahref="https://github.com/folke/lazy.nvim">lazy.nvim</a>进行插件管理，在plugin.lua文件下，按文档进行配置</p><h4 id="主题">2 主题</h4><ul><li>安装和配置</li></ul><p>在plugins/theme.lua文件中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Color Theme</span><br>&#123;<br>  <span class="hljs-string">&quot;folke/tokyonight.nvim&quot;</span>,<br>  lazy = <span class="hljs-literal">false</span>,<br>  priority = <span class="hljs-number">1000</span>,<br>  <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>      vim.cmd(<span class="hljs-string">[[colorscheme tokyonight-moon]]</span>)<br>  <span class="hljs-keyword">end</span>,<br>&#125;,<br><br><span class="hljs-comment">-- Bottom Line</span><br>&#123;<br>    <span class="hljs-string">&quot;nvim-lualine/lualine.nvim&quot;</span>,<br>    dependencies = &#123; <span class="hljs-string">&#x27;nvim-tree/nvim-web-devicons&#x27;</span> &#125;, <br>    options = &#123;<br>        theme = <span class="hljs-string">&#x27;tokyonight&#x27;</span>,<br>    &#125;,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lualine&#x27;</span>).setup()<br>    <span class="hljs-keyword">end</span>,<br>&#125;<br><br><span class="hljs-comment">-- Open Dashboard</span><br>&#123;<br>    <span class="hljs-string">&quot;goolord/alpha-nvim&quot;</span>,<br>    dependencies = &#123; <span class="hljs-string">&#x27;nvim-tree/nvim-web-devicons&#x27;</span> &#125;,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;alpha&#x27;</span>).setup(<br>            <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;alpha.themes.dashboard&#x27;</span>).<span class="hljs-built_in">config</span><br>        )<br>    <span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文件目录">3 文件目录</h4><ul><li>安装</li></ul><p>在plugins/nvim-tree.lua文件中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;<br>    <span class="hljs-string">&quot;nvim-tree/nvim-tree.lua&quot;</span>,<br>    version = <span class="hljs-string">&quot;*&quot;</span>,<br>    dependencies = &#123;<span class="hljs-string">&quot;nvim-tree/nvim-web-devicons&quot;</span>&#125;,<br>    keys = &#123;<br>        &#123; <span class="hljs-string">&quot;&lt;C-n&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;cmd&gt;NvimTreeToggle&lt;cr&gt;&quot;</span>, desc = <span class="hljs-string">&quot;NvimTree&quot;</span> &#125;,<br>    &#125;,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nvim-tree&quot;</span>).setup &#123;&#125;<br>    <span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><p>最常用的其实就是只有<code>:NvimTreeToggle</code>命令，将其映射到<code>&lt;C-n&gt;</code>上，并通过<code>&lt;C-w&gt; -&gt; | &lt;-</code>转换窗口</p><p>在打开Tree的情况下<code>g?</code>打开快捷键提示</p><h4 id="语法高亮和代码折叠">4 语法高亮和代码折叠</h4><ul><li>安装</li></ul><p>在plugins/treesitter.lua文件中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;<br>    <span class="hljs-string">&quot;nvim-treesitter/nvim-treesitter&quot;</span>,<br>    build = <span class="hljs-string">&quot;:TSUpdate&quot;</span>,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> <br>        <span class="hljs-keyword">local</span> configs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;nvim-treesitter.configs&quot;</span>)<br><br>        configs.setup(&#123;<br>            ensure_installed = &#123;<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;lua&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>&#125;,<br>            sync_install = <span class="hljs-literal">false</span>,<br>            highlight = &#123; enable = <span class="hljs-literal">true</span> &#125;,<br>            incremental_selection = &#123;<br>            enable = <span class="hljs-literal">true</span>,<br>                keymaps = &#123;<br>                    init_selection = <span class="hljs-string">&quot;gnn&quot;</span>, <br>                    node_incremental = <span class="hljs-string">&quot;grn&quot;</span>,<br>                    scope_incremental = <span class="hljs-string">&quot;grc&quot;</span>,<br>                    node_decremental = <span class="hljs-string">&quot;grm&quot;</span>,<br>                &#125;,<br>            &#125;,<br>            indent = &#123; enable = <span class="hljs-literal">true</span> &#125;,<br>        &#125;)<br>    <span class="hljs-keyword">end</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在option.lua文件下配置折叠选项</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.opt.foldmethod = <span class="hljs-string">&quot;expr&quot;</span><br>vim.opt.foldexpr = <span class="hljs-string">&quot;nvim_treesitter#foldexpr()&quot;</span><br>vim.opt.foldenable = <span class="hljs-literal">false</span><br>vim.opt.foldlevel = <span class="hljs-number">99</span><br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><p><code>:TSInstall &lt;language&gt;</code>手动下载选定语言的分析器</p><p><code>:TSInstallInfo</code>查看一下在的分析器信息</p><p><code>zc</code>关闭折叠，<code>zo</code>打开折叠，<code>zM</code>折叠所有，<code>zR</code>打开所有</p><h4 id="浮动终端内置终端">5 浮动终端（内置终端）</h4><ul><li>安装</li></ul><p>在plugins/toggleterm.lua文件中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">return</span> &#123;<br>    &#123;<br>        <span class="hljs-string">&quot;akinsho/toggleterm.nvim&quot;</span>,<br>        version = <span class="hljs-string">&quot;*&quot;</span>,<br>        keys = &#123;<br>            &#123; <span class="hljs-string">&quot;&lt;C-t&gt;f&quot;</span>, <span class="hljs-string">&quot;&lt;cmd&gt;ToggleTerm direction=float&lt;cr&gt;&quot;</span>, desc = <span class="hljs-string">&quot;NewTerm&quot;</span> &#125;,<br>            &#123; <span class="hljs-string">&quot;&lt;C-t&gt;h&quot;</span>, <span class="hljs-string">&quot;&lt;cmd&gt;ToggleTerm size=30 direction=horizontal&lt;cr&gt;&quot;</span>, desc=<span class="hljs-string">&quot;HoriTerm&quot;</span> &#125;,<br>        &#125;,<br>        <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>            <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;toggleterm&quot;</span>).setup &#123;&#125;<br>        <span class="hljs-keyword">end</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><p><code>:ToggleTerm direction=float/horizontal/Vertical dir=~/xxx size=40</code>可以打开终端</p><p>配置了快捷键<code>&lt;C-t&gt;f</code>打开浮动窗口，<code>&lt;C-t&gt;h</code>打开底部窗口，<code>&lt;C-\&gt;&lt;C-n&gt;</code>推出TERMINALmode，然后<code>&lt;C-w&gt;hjkl</code>移动关注窗口</p><h4 id="lsp配置">6 LSP配置</h4><ul><li>安装</li></ul><p>在plugins/lsp.lua文件中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Lsp Install</span><br>&#123;<br>    <span class="hljs-string">&#x27;williamboman/mason.nvim&#x27;</span>,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mason&#x27;</span>).setup()<br>    <span class="hljs-keyword">end</span>,<br>&#125;,<br><br>&#123;<br>    <span class="hljs-string">&#x27;williamboman/mason-lspconfig.nvim&#x27;</span>,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mason-lspconfig&quot;</span>).setup &#123;<br>            ensure_installed = &#123; <span class="hljs-string">&#x27;lua_ls&#x27;</span>, <span class="hljs-string">&#x27;clangd&#x27;</span> , <span class="hljs-string">&#x27;pylsp&#x27;</span> &#125;<br>        &#125;<br>    <span class="hljs-keyword">end</span>,<br>&#125;,<br><br><span class="hljs-comment">-- Lsp Config</span><br>&#123;<br>    <span class="hljs-string">&#x27;neovim/nvim-lspconfig&#x27;</span>,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-keyword">local</span> lspconfig = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lspconfig&#x27;</span>)<br><br>        <span class="hljs-comment">-- Lua</span><br>        lspconfig.lua_ls.setup&#123;<br>            on_init = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(client)</span></span><br>                <span class="hljs-keyword">local</span> <span class="hljs-built_in">path</span> = client.workspace_folders[<span class="hljs-number">1</span>].name<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> vim.loop.fs_stat(<span class="hljs-built_in">path</span>..<span class="hljs-string">&#x27;/.luarc.json&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> vim.loop.fs_stat(<span class="hljs-built_in">path</span>..<span class="hljs-string">&#x27;/.luarc.jsonc&#x27;</span>) <span class="hljs-keyword">then</span><br>                    client.<span class="hljs-built_in">config</span>.settings = vim.tbl_deep_extend(<span class="hljs-string">&#x27;force&#x27;</span>, client.<span class="hljs-built_in">config</span>.settings, &#123;<br>                        Lua = &#123;<br>                            runtime = &#123;<br>                                version = <span class="hljs-string">&#x27;LuaJIT&#x27;</span>,<br>                            &#125;,<br>                            workspace = &#123;<br>                                checkThirdParty = <span class="hljs-literal">false</span>,<br>                                library = &#123;<br>                                    vim.env.VIMRUNTIME<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;)<br><br>                    client.notify(<span class="hljs-string">&quot;workspace/didChangeConfiguration&quot;</span>, &#123; settings = client.<span class="hljs-built_in">config</span>.settings &#125;)<br>                <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>            <span class="hljs-keyword">end</span><br>        &#125;<br><br>        <span class="hljs-comment">-- C</span><br>        lspconfig.clangd.setup&#123;&#125;<br><br>        <span class="hljs-comment">-- Python</span><br>        lspconfig.pylsp.setup&#123;<br>            settings = &#123;<br>                pylsp = &#123;<br>                    plugins = &#123;<br>                        pycodestyle = &#123;<br>                            ignore = &#123;<span class="hljs-string">&#x27;W391&#x27;</span>&#125;,<br>                            maxLineLength = <span class="hljs-number">100</span>,<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    <span class="hljs-keyword">end</span>,<br>&#125;,<br><br><span class="hljs-comment">-- AutoCompletion</span><br>&#123; <span class="hljs-string">&#x27;hrsh7th/cmp-nvim-lsp&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;hrsh7th/cmp-buffer&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;hrsh7th/cmp-path&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;hrsh7th/cmp-cmdLine&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;L3MON4D3/LuaSnip&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;saadparwaiz1/cmp_luasnip&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;rafamadriz/friendly-snippets&#x27;</span> &#125;,<br>&#123; <span class="hljs-string">&#x27;onsails/lspkind-nvim&#x27;</span> &#125;,<br><br>&#123;<br>    <span class="hljs-string">&#x27;hrsh7th/nvim-cmp&#x27;</span>,<br>    <span class="hljs-built_in">config</span> = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>        <span class="hljs-keyword">local</span> lspkind = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lspkind&#x27;</span>)<br>        <span class="hljs-keyword">local</span> cmp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cmp&#x27;</span>)<br><br>        cmp.setup &#123;<br>            <span class="hljs-comment">-- engineer</span><br>            snippet = &#123;<br>                expand = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(args)</span></span><br>                    <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;luasnip&#x27;</span>).lsp_expand(args.body)<br>                <span class="hljs-keyword">end</span>,<br>            &#125;,<br><br>            <span class="hljs-comment">-- sources</span><br>            sources = cmp.<span class="hljs-built_in">config</span>.sources(<br>                &#123;<br>                    &#123; name = <span class="hljs-string">&#x27;nvim_lsp&#x27;</span> &#125;,<br>                    &#123; name = <span class="hljs-string">&#x27;luasnip&#x27;</span> &#125;,<br>                &#125;,<br>                &#123;<br>                    &#123; name = <span class="hljs-string">&#x27;buffer&#x27;</span> &#125;,<br>                    &#123; name = <span class="hljs-string">&#x27;path&#x27;</span> &#125;,<br>                &#125;<br>            ),<br><br>            <span class="hljs-comment">-- lspkind</span><br>            formatting = &#123;<br>                <span class="hljs-built_in">format</span> = lspkind.cmp_format(&#123;<br>                    with_text = <span class="hljs-literal">true</span>,<br>                    maxwidth = <span class="hljs-number">50</span>,<br>                    before = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(entry, vim_item)</span></span><br>                        vim_item.menu = <span class="hljs-string">&quot;[&quot;</span> .. <span class="hljs-built_in">string</span>.<span class="hljs-built_in">upper</span>(entry.source.name) .. <span class="hljs-string">&quot;]&quot;</span><br>                        <span class="hljs-keyword">return</span> vim_item<br>                    <span class="hljs-keyword">end</span><br>                &#125;)<br>            &#125;,<br><br>            <span class="hljs-comment">-- key mapping</span><br>            mapping = &#123;<br>                [<span class="hljs-string">&#x27;&lt;C-k&gt;&#x27;</span>] = cmp.mapping.select_prev_item(),<br>                [<span class="hljs-string">&#x27;&lt;C-j&gt;&#x27;</span>] = cmp.mapping.select_next_item(),<br>                [<span class="hljs-string">&#x27;&lt;C-l&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.complete(), &#123; <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> &#125;),<br>                [<span class="hljs-string">&#x27;&lt;C-h&gt;&#x27;</span>] = cmp.mapping(&#123;<br>                    i = cmp.mapping.abort(),<br>                    c = cmp.mapping.<span class="hljs-built_in">close</span>(),<br>                &#125;),<br>                [<span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>] = cmp.mapping.confirm(&#123;<br>                    <span class="hljs-built_in">select</span> = <span class="hljs-literal">true</span>,<br>                    behavior = cmp.ConfirmBehavior.Replace,<br>                &#125;),<br>                [<span class="hljs-string">&#x27;&lt;C-u&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.scroll_docs(<span class="hljs-number">-4</span>), &#123; <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> &#125;),<br>                [<span class="hljs-string">&#x27;&lt;C-d&gt;&#x27;</span>] = cmp.mapping(cmp.mapping.scroll_docs(<span class="hljs-number">4</span>), &#123; <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> &#125;),<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;luasnip.loaders.from_vscode&quot;</span>).lazy_load()<br><br>        cmp.setup.cmdline(<span class="hljs-string">&#x27;/&#x27;</span>, &#123;<br>            sources = &#123;<br>                &#123; name = <span class="hljs-string">&#x27;buffer&#x27;</span> &#125;<br>            &#125;<br>        &#125;)<br>    <span class="hljs-keyword">end</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>在keymap.lua中作如下配置</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- Global mappings.</span><br><span class="hljs-comment">-- after the language server attaches to the current buffer</span><br>vim.api.nvim_create_autocmd(<span class="hljs-string">&#x27;LspAttach&#x27;</span>, &#123;<br>    group = vim.api.nvim_create_augroup(<span class="hljs-string">&#x27;UserLspConfig&#x27;</span>, &#123;&#125;),<br>    callback = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(ev)</span></span><br>        <span class="hljs-comment">-- Enable completion triggered by &lt;c-x&gt;&lt;c-o&gt;</span><br>        vim.bo[ev.buf].omnifunc = <span class="hljs-string">&#x27;v:lua.vim.lsp.omnifunc&#x27;</span><br><br>        <span class="hljs-comment">-- Buffer local mappings.</span><br>        <span class="hljs-comment">-- See `:help vim.lsp.*` for documentation on any of the below functions</span><br>        <span class="hljs-keyword">local</span> opts = &#123; buffer = ev.buf &#125;<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;gD&#x27;</span>, vim.lsp.buf.declaration, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;gd&#x27;</span>, vim.lsp.buf.definition, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, vim.lsp.buf.hover, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;gi&#x27;</span>, vim.lsp.buf.implementation, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;C-k&gt;&#x27;</span>, vim.lsp.buf.signature_help, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;wa&#x27;</span>, vim.lsp.buf.add_workspace_folder, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;wr&#x27;</span>, vim.lsp.buf.remove_workspace_folder, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;wl&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>          <span class="hljs-built_in">print</span>(vim.inspect(vim.lsp.buf.list_workspace_folders()))<br>        <span class="hljs-keyword">end</span>, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;D&#x27;</span>, vim.lsp.buf.type_definition, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;rn&#x27;</span>, vim.lsp.buf.<span class="hljs-built_in">rename</span>, opts)<br>        vim.keymap.set(&#123; <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span> &#125;, <span class="hljs-string">&#x27;&lt;space&gt;ca&#x27;</span>, vim.lsp.buf.code_action, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;gr&#x27;</span>, vim.lsp.buf.references, opts)<br>        vim.keymap.set(<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;&lt;space&gt;f&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span><br>          vim.lsp.buf.<span class="hljs-built_in">format</span> &#123; async = <span class="hljs-literal">true</span> &#125;<br>        <span class="hljs-keyword">end</span>, opts)<br>    <span class="hljs-keyword">end</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><p><code>:Mason</code>打开Mason的浮动窗口，查看sever下载情况</p><p><code>:LspInfo</code>查看LSP加载情况</p><p><code>&lt;C-h/j/k/l&gt;</code>分别表示关闭，下一个，上一个，打开补全提示</p><p><code>&lt;CR&gt;</code>表示输入当前选择的补全</p><p><code>&lt;C-d/u&gt;</code>分别表示向下/上翻页</p><p><code>gd/gr</code>跳转到定义，引用的位置</p><p><code>K</code>展示当前函数详细信息</p><h2 id="参考资料">参考资料</h2><ol type="1"><li><p><ahref="https://vegastack.com/tutorials/find-and-replace-in-vim-vi/">Findand Replace in Vim/Vi</a></p></li><li><p><ahref="https://opensource.com/article/19/2/getting-started-vim-visual-mode">Gettingstarted with Vim visual mode</a></p></li><li><p><ahref="https://dev.to/iggredible/mastering-visual-mode-in-vim-15pl">MasteringVisual Mode in Vim</a></p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的学习计划</title>
    <link href="/2023/12/25/Learn-Plan/"/>
    <url>/2023/12/25/Learn-Plan/</url>
    
    <content type="html"><![CDATA[<h1 id="我的学习计划">我的学习计划</h1><h2 id="计划事项">1）计划事项</h2><ul class="task-list"><li><p><label><input type="checkbox" />阅读</label></p><ul class="task-list"><li><label><input type="checkbox" />Build Your Own TextEditor</label></li><li><label><input type="checkbox" />CSAPP</label></li></ul></li><li><p><label><input type="checkbox" />论文</label></p><ul class="task-list"><li><label><input type="checkbox" checked="" />AlexNet</label></li><li><label><input type="checkbox" checked="" />ResNet</label></li><li><label><input type="checkbox" checked="" />Transformer</label></li><li><label><input type="checkbox" />Graph Neural Network</label></li></ul></li><li><p><label><input type="checkbox" />学习</label></p><ul class="task-list"><li><label><input type="checkbox" />NJU-PA</label></li></ul></li></ul><h2 id="学习总结">2）学习总结</h2>]]></content>
    
    
    
    <tags>
      
      <tag>plan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Build Your Own Text Editor》阅读记录</title>
    <link href="/2023/12/25/Build-Your-Own-Text-Editor/"/>
    <url>/2023/12/25/Build-Your-Own-Text-Editor/</url>
    
    <content type="html"><![CDATA[<h1 id="build-your-own-text-editor读书笔记">《Build Your Own TextEditor》读书笔记</h1><blockquote><p><a href="https://viewsourcecode.org/snaptoken/kilo/"><strong>BuildYour Own TextEditor</strong></a>，一本很有意思的小书，几乎是手把手的带读者写成了一个小巧的文本编辑器，适合刚学完c语言的人阅读</p></blockquote><h2 id="一-阅读记录">一 阅读记录</h2><h4 id="raw-mode-和-canonical-mode">1 Raw mode 和 Canonical mode</h4><blockquote><p>However, by default your terminal starts in <strong>canonicalmode</strong>, also called <strong>cooked mode</strong>. In this mode,keyboard input is only sent to your program when the user pressesEnter.</p><p>We want to process each keypress as it comes in, so we can respond toit immediately. What we want is <strong>raw mode</strong></p></blockquote><p>其实就是当终端处于<strong>canonicalmode</strong>时，需要接受到<strong>Enter</strong>才能读取输入</p><p>当终端处于<strong>rawmode</strong>时，直接一个字符一个字符的接受输入</p><h4 id="termios.h库">2 termios.h库</h4><p>用于控制终端行为，例如raw和canonical mode，终端状态等</p><h4 id="ctrl-x-等等">3 Ctrl-X 等等</h4><ul><li>Ctrl-c 发送SIGINT信号，表示停止程序</li><li>Ctrl-z 发送SIGTSTP信号，表示挂起程序</li><li>Ctrl-s 和 Ctrl-q 表示停止接受数据和开始接受数据</li><li>Ctrl-v 将之后输出的非字符按文本解释</li><li>Ctrl-M和Enter一样，即换行，默认会从<code>\n</code>转成<code>\r\n</code>，表示光标回到行首以及进入下一行</li></ul><h4 id="escape-sequence">4 Escape Sequence</h4><p><code>escape sequence</code>译作<strong>转义序列</strong></p><h2 id="二-my-editor-实现">二 My Editor 实现</h2><h2 id="三-neovim-源码阅读">三 NeoVim 源码阅读</h2><h2 id="参考资料">参考资料</h2><ol type="1"><li><a href="https://viewsourcecode.org/snaptoken/kilo/"><strong>BuildYour Own Text Editor</strong></a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Build Your Own X</tag>
      
      <tag>Read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>408 数据结构算法题总结</title>
    <link href="/2023/11/11/408-Data-Struce-algorithm-Learn/"/>
    <url>/2023/11/11/408-Data-Struce-algorithm-Learn/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构算法题总结">408 数据结构算法题总结</h1><blockquote><p>本文记录笔者在学习408数据结构算法题过程中的一些思考和总结，大体如下</p><p>1）算法模板（快速排序等）</p><p>2）题目总结</p></blockquote><h2 id="算法模板">1）算法模板</h2><p>我认为408数据结构的算法题只有一个模板需要熟记，就是快速排序算法，其他的模板用上的概率都不大</p><h4 id="快速排序">快速排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span>(L &gt;= R) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> M = Partion(A, L, R);<br>    QuickSort(A, L, M<span class="hljs-number">-1</span>);<br>    QuickSort(A, M+<span class="hljs-number">1</span>, R);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Partion</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-type">int</span> mid = A[L];<br>    <span class="hljs-keyword">while</span>(L &lt; R) &#123;<br>        <span class="hljs-keyword">while</span>(A[R]&gt;=mid &amp;&amp; L&lt;R) R--;<br>       A[L] = A[R];<br>        <span class="hljs-keyword">while</span>(A[L]&lt;=mid &amp;&amp; L&lt;R) L++;<br>        A[R] = A[L];<br>    &#125;<br>    A[L] = mid;<br>    retruen L;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二分查找">二分查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">BinarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = length(A), mid;<br>    <span class="hljs-keyword">while</span>(l &lt;=   r) &#123;<br>mid = (l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(A[mid] == key)<br>            <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[mid] &gt; key) <br>            r = mid<span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">else</span> <br>            l = mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="kmp算法">KMP算法</h4><p>KMP算法分成两步，第一步先获得一个next数组，</p><figure><imgsrc="https://pic1.zhimg.com/80/v2-40b4885aace7b31499da9b90b7c46ed3_720w.webp?source=1def8aca"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>next数组实质上是部分匹配表（PMT）后移动了一位，然后将0位置设置为-1，所以除了0位置外的每一位的值都分别表示不包括这一位在内的，前面的子串的前后缀相等的最大长度，计算得到next数组的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span> *p, <span class="hljs-type">int</span> *next)</span> &#123;<br>    next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(p)) &#123;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">-1</span> || p[i] == p[j]) &#123;<br>            i++; j++;<br>            next[i] = j;<br>        &#125; <span class="hljs-keyword">else</span> <br>            j = next[j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算next数组可以看作模式串p自己和自己匹配的过程，在所有匹配中，主串的位置，也就是i，是不会前移的，一直动的只有j，如果ij第一位就不匹配，此时<code>j=next[0]</code>实质上等于<code>j=0,i++</code>，就是让i后移一位</p><figure><imgsrc="https://picx.zhimg.com/80/v2-8a1a205df5cad7ab2f07498484a54a89_720w.webp?source=1def8aca"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>KMP的具体算法其实和前面计算next数组时做的匹配是一样的，指是模式串变成了给定的另外一个模式串，匹配成功后，ij指向的是匹配串的尾部，所以需要返回<code>i-j</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">KMP</span><span class="hljs-params">(<span class="hljs-type">char</span> *t, <span class="hljs-type">char</span> *p)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(t) &amp;&amp; j &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(p)) &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">-1</span> || t[i] == p[j]) &#123;<br>            i++; j++<br>        &#125; <span class="hljs-keyword">else</span><br>            j = next[j];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(j == <span class="hljs-built_in">strlen</span>(p))<br>        <span class="hljs-keyword">return</span> i - j;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="树的遍历的非递归实现">树的遍历的非递归实现</h4><h5 id="中前序遍历">中/前序遍历</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(BiTree T)</span> &#123;<br>    InitStack(S); BiTree p = T;<br>    <span class="hljs-keyword">while</span>(p || !isEmpty(S)) &#123;<br>        <span class="hljs-keyword">if</span>(p) &#123;<br>            <span class="hljs-comment">// visit(p); 前序遍历就是把visit移动到此处</span><br>            push(S, p);<br>            p = p-&gt;lchile;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Pop(S, p); visit(p);<br>            p = p-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后序遍历">后序遍历</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PostOrder</span><span class="hljs-params">(BiTree T)</span> &#123;<br>    InisStack(S); BiTree p = T, r = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p || isEmpty(S)) &#123;<br>        <span class="hljs-keyword">if</span>(p) &#123;<br>            Push(S, p);<br>            p = p-&gt;lchild;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Top(S, p);<br>            <span class="hljs-keyword">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild!=r)<br>                p = p-&gt;rchild<br>        <span class="hljs-keyword">else</span> &#123;<br>                Pop(S, p);<br>                visit(p);<br>                r=p;<br>                p=<span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目总结">2）题目总结</h2><p>通过几个典型题目，记录408数据结构的算法题可能会用到的几个做题思路</p><h4 id="双指针">双指针</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指Offer 21. 调整数组顺序使奇数位于偶数前面</a></li></ol><p>一道不太典型的双指针的题，指针分别指向数组的头尾，然后交换头尾元素</p><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指Offer 52. 两个链表的第一个公共节点</a></li></ol><p><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" /></p><p>最直接的想法肯定是算出两个链表的长度，把长链表后移，然后同时遍历，看有没有公共节点，这样时间复杂都也是O(n)，但是代码有点长，这里有一个更巧妙的解法，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode *<span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> &#123;<br>    ListNode* a = headA, *b = headB;<br>    <span class="hljs-keyword">while</span>(a != b) &#123;<br>        A = A!=nullptr?A-&gt;next:headB;<br>        B = B!=nullptr?B-&gt;next:headA;<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><p>AB链表同时遍历，遍历完自己之后，再从另一个的头开始遍历，如果存在公共节点，两者会在公共节点处相遇，如果不存在，两者会同时指向NULL</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/linked-list-cycle-ii/">142.环形链表 II</a></li></ol><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>类似的题目一般都可以拥双指针法解决，比如找环，找公共尾部，找尾部节点等，大体上都是根据双指针的关系推理出要找的点的位置，例如本题使用快慢指针，有<code>fast=2slow</code>，然后如果有环，则存在两者相遇时有，<code>fast=slow+nb</code>，所以可以求出<code>fast=2nb; slow=nb</code>，而环的入口节点的位置在<code>a+nb</code>，所以设置两个指针，从slow和头节点的位置同时后移，相遇则为环入口</p><h4 id="反转链表">反转链表</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指Offer 24. 反转链表</a></li></ol><p>注意区分一下有无头节点，无头节点就直接<code>return prev</code>，有头节点就<code>head-&gt;next=prev</code>，然后再return，除了链表，数组也可以通过双指针，一个指头一个指尾，然后换位置，直到指针交错的方式反转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode* <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode* head)</span> &#123;<br>ListNode* prev = <span class="hljs-literal">NULL</span>, *curr = head;<br>    <span class="hljs-keyword">while</span>(curr) &#123;<br>        ListNode* next = curr-&gt;next;<br>        curr-&gt;next = prev;<br>        prev = curr;<br>        curr = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空间换时间">空间换时间</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指Offer 39. 数组中出现次数超过一半的数字</a></li></ol><p>这种题（在408考试中）最直接的想法是空间换时间，通过数组来记录每个数字的个数，然后遍历这个数组，但是这个题目进了一步，题设数组中可能存在负数，这时候直接用个数组来记录就有点麻烦了，所以有两个思路，一个是那就把记录数字个数的数组换成字典，另一个就是<strong>多数（摩尔）投票法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, voteNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span>(voteNum == <span class="hljs-number">0</span>) &#123;<br>            x = nums[i];<br>            voteNum = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(x == nums[i])<br>                voteNum++;<br>            <span class="hljs-keyword">else</span><br>                voteNum--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> xNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <br>        <span class="hljs-keyword">if</span>(nums[i] == x)<br>            xNum++;<br>    <span class="hljs-keyword">if</span>(xNum &gt; stock.size()/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路比较简单，就是用一个变量x保存现在最多的元素，用voteNum保存投票数，遍历数组，<code>nums[i]==x</code>则voteNum++，否则--，如果voteNum为0，则换x，遍历完得到的x就是数组中最多的元素</p><p>#### 简单动态规划</p><p>我认为考到动态规划上面的可能性，不是不大，而是微乎其微，所以这里只记录一个极简单的动态规划题目</p><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指Offer 42. 连续子数组的最大和</a></li></ol><p>动态规划问题，首先判断子问题是什么，本题可设为以位置i结尾的数组的最大和，以此构建动态规划数组dp，有<code>dp[0]=nums[0]</code>，然后构建转移方程</p><p><span class="math display">\[dp[i] =\begin{cases}dp[i-1] + nums[i],\quad dp[i-1]\geq0\\nums[i],\qquad \qquad \qquad dp[i-1]&lt;0\end{cases}\]</span></p><p>有了子问题，初始状态和转移方程，动态规划的代码其实不难写</p><h4 id="栈和队列">栈和队列</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指Offer 09. 用两个栈实现队列</a></li></ol><p>我认为这种题一般不会考算法，但是可能考应用题</p><p>用两个栈实现队列，思想很简单，就是一个栈用来存数据，队列入队就直接入到这个栈里面，一个栈用来逆置后输出队首，如果输出栈为空，就把数据栈放到输出栈，否则直接输出输出栈首</p><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指Offer 30. 包含min函数的栈</a></li></ol><p>同样，这个题也是可能考应用题</p><p>也是用两个栈来实现，一个栈做正常的栈，另一个栈保存最小元素，当检测到最小元素的栈为空或者栈顶的值大于当前入栈的值时，最小栈和正常栈同时入栈，当检测到两个栈顶为相同元素时，两个栈同时出栈</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指Offer 59 - I. 滑动窗口的最大值</a></li></ol><p>这个倒是可能考算法题了，只是难度有点大了，实际上最优解需要用到<strong>单调队列</strong>，我猜这属于超纲内容</p><p>在考纲内的想法是构造一个大根堆，滑动窗口每次右移时，判断堆顶元素是否在窗口中，如果不再则移出，这种方法的时间复杂度为<code>O(nlogn)</code></p><p>单调队列是一种主要用于解决滑动窗口类问题的数据结构，其实就是对于一个数组维护了一个双向队列，遍历数组，同时在队列内保持单调（递增或者递减），为了做到这一点，遍历到每个数时，判断其是否大于（或者小于）队列尾部的数，如果是，则队列尾部出队，直到不满足</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>    deque&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;=nums[q.<span class="hljs-built_in">back</span>()])<br>        q.<span class="hljs-built_in">pop_back</span>();<br>    q.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;nums[q.<span class="hljs-built_in">front</span>()]&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k; i &lt; len; i++) &#123;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;=nums[q.<span class="hljs-built_in">back</span>()])<br>            q.<span class="hljs-built_in">pop_back</span>();<br>        q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">front</span>() &lt;= i-k)<br>            q.<span class="hljs-built_in">pop_front</span>();<br>        ans.push_back[nums[q.<span class="hljs-built_in">front</span>()]];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="树">树</h4><ol type="1"><li>王道24模拟卷一 树的根节点到给定节点间的路径</li></ol><p>我认为不大可能考这种算法，因为没有区分度，不能按照不同的答法给出不同的分数</p><p>王道的答案是后序遍历的非递归实现，到给定节点时，栈中恰好是根节点到给定节点的路线，具体实现见上一节后序遍历非递归实现的模板，其实递归实现更简单，只需要借助一个栈结构来保存路径上的节点，给出如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最后栈中保存的就是路径</span><br>InitStack(S);<br><span class="hljs-type">int</span> <span class="hljs-title function_">findTreePath</span><span class="hljs-params">(BiTree T, <span class="hljs-type">int</span> val)</span> &#123;<br><span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Push(S, T);<br>    <span class="hljs-keyword">if</span>(T-&gt;data == val) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(T-&gt;lchild != <span class="hljs-literal">NULL</span>) flag = findTreePath(T-&gt;lchild, val);<br>    <span class="hljs-keyword">if</span>(!flag &amp;&amp; T-&gt;rchild != <span class="hljs-literal">NULL</span>) flag = findTreePath(T-&gt;rchild, val);<br>    <span class="hljs-keyword">if</span>(!flag) Pop(S);<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指Offer 27. 二叉树的镜像</a></li></ol><p>很简单，在基本的递归模板上，将访问操作修改为交换左右子树即可</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指Offer 28. 对称的二叉树</a></li></ol><p>递归传入的是同层的两个子树，并用于判断两个子树是否互为镜像，当两个子树都为空时返回true，一个为空或者两者的值不相等时返回false，不然就继续判断两个子树下一层的四个子树对应位置是否成镜像</p><ol start="4" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指Offer 34. 二叉树中和为某一值的路径</a></li></ol><h3 id="参考">参考</h3><p>[1] <ahref="https://zhuanlan.zhihu.com/p/286811053">408数据结构-算法题专烂栏</a></p><p>[2] <ahref="https://www.zhihu.com/question/21923021">知乎-如何更好地理解和掌握KMP算法？</a></p><p>[3] <ahref="https://www.cnblogs.com/neuzk/p/9486730.html">树的根节点到给定节点间的路径</a></p><p>[4] <ahref="https://zhuanlan.zhihu.com/p/346354943">算法学习笔记(66):单调队列</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github博客系统搭建流程记录</title>
    <link href="/2023/11/09/How-to-Use-Hexo/"/>
    <url>/2023/11/09/How-to-Use-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github博客系统搭建流程记录">Hexo +Github博客系统搭建流程记录</h1><blockquote><p>本文将简要记录利用Hexo和Github搭建自己博客系统的流程，包含以下内容</p><ol type="1"><li>Hexo的下载和使用</li><li>Hexo主题更换</li><li>Github部署Hexo博客</li></ol></blockquote><h2 id="hexo的下载和使用">1) Hexo的下载和使用</h2><p>其实跟着<ahref="https://hexo.io/zh-cn/docs/setup">Hexo</a>的文档就行了，我的下载和使用过程也没有遇到什么大问题，所以简要记录流程如下</p><ol type="1"><li>安装</li></ol><p>先安装<strong>Git</strong>和<strong>Node.js</strong>，然后利用npm安装<strong>Hexo</strong></p><p><code>$ npm install -g hexo-cli</code></p><ol start="2" type="1"><li>建站</li></ol><p>创建一个空文件夹<code>folder</code>，在该文件夹下执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>配置</li></ol><p>对照Hexo文档的<ahref="https://hexo.io/zh-cn/docs/configuration">配置页面</a>更改<code>&lt;folder&gt;</code>下的配置文件<code>_config.yml</code></p><ol start="4" type="1"><li>使用</li></ol><p><strong>Hexo</strong>的命令比较少，较为常用的只有以下几个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;     <span class="hljs-comment"># 新建文章</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server                   <span class="hljs-comment"># 开启本地服务器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo deploy     <span class="hljs-comment"># 清除缓存和生成的静态文件 &amp;&amp; 部署</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo list &lt;<span class="hljs-built_in">type</span>&gt;              <span class="hljs-comment"># 列出网站数据</span></span><br></code></pre></td></tr></table></figure><p>在<code>hexo new</code>出一篇文章后，<code>source/_post/</code>下会出现对应layout的markdown文件，文件包含Front-matter部分，举例如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2023/11/23 20:10:10<br>tags:<br><span class="hljs-bullet">-</span> Tool<br><span class="hljs-section">- How to use</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>在Front-matter的后面编写博客即可</p><h2 id="hexo主题更换">2）Hexo主题更换</h2><p>我选择了使用<ahref="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，并依照其参考文档进行了设置，没有遇到问题</p><h2 id="github部署hexo博客">3）Github部署Hexo博客</h2><ol type="1"><li>在Github中创建名为<code>&lt;username&gt;.github.io</code>的仓库</li><li>安装hexo-deployer-git工具</li></ol><p><code>$ npm install hexo-deployer-git --save</code></p><ol start="3" type="1"><li>修改<code>_config.yml</code>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br><span class="hljs-attr">barnch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>执行<code>hexo clean &amp;&amp; hexo d</code></li></ol><p>此处需要注意，在<code>hexo d</code>后，输入用户名和token，token需要在Github-setting-development下生成</p><ol start="5" type="1"><li>然后就可以通过<code>https://&lt;username&gt;.github.io</code>访问博客了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>How to Use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
