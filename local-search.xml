<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的学习计划</title>
    <link href="/2023/12/25/Learn-Plan/"/>
    <url>/2023/12/25/Learn-Plan/</url>
    
    <content type="html"><![CDATA[<h1 id="我的学习计划">我的学习计划</h1><h2 id="计划事项">1）计划事项</h2><ul class="task-list"><li><p><label><input type="checkbox" />阅读</label></p><ul class="task-list"><li><label><input type="checkbox" />Build Your Own TextEditor</label></li><li><label><input type="checkbox" />CSAPP</label></li></ul></li><li><p><label><input type="checkbox" />论文</label></p><ul class="task-list"><li><label><input type="checkbox" />AlexNet</label></li></ul></li><li><p><label><input type="checkbox" />学习</label></p><ul class="task-list"><li><label><input type="checkbox" />NJU-PA</label></li></ul></li></ul><h2 id="学习总结">2）学习总结</h2>]]></content>
    
    
    
    <tags>
      
      <tag>plan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《Build Your Own Text Editor》阅读记录</title>
    <link href="/2023/12/25/Build-Your-Own-Text-Editor/"/>
    <url>/2023/12/25/Build-Your-Own-Text-Editor/</url>
    
    <content type="html"><![CDATA[<h1 id="build-your-own-text-editor阅读记录">《Build Your Own TextEditor》阅读记录</h1><blockquote><p><a href="https://viewsourcecode.org/snaptoken/kilo/"><strong>BuildYour Own TextEditor</strong></a>，一本很有意思的小书，几乎是手把手的带读者写成了一个小巧的文本编辑器，适合刚学完c语言的人阅读</p></blockquote><h4 id="raw-mode-和-canonical-mode是什么">1 Raw mode 和 Canonicalmode是什么</h4><blockquote><p>However, by default your terminal starts in <strong>canonicalmode</strong>, also called <strong>cooked mode</strong>. In this mode,keyboard input is only sent to your program when the user pressesEnter.</p><p>We want to process each keypress as it comes in, so we can respond toit immediately. What we want is <strong>raw mode</strong></p></blockquote><h3 id="section">2</h3><h2 id="参考资料">参考资料</h2><ol type="1"><li><a href="https://viewsourcecode.org/snaptoken/kilo/"><strong>BuildYour Own Text Editor</strong></a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Build Your Own X</tag>
      
      <tag>Read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>408 数据结构算法题总结</title>
    <link href="/2023/11/11/408-Data-Struce-algorithm-Learn/"/>
    <url>/2023/11/11/408-Data-Struce-algorithm-Learn/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构算法题总结">408 数据结构算法题总结</h1><blockquote><p>本文记录笔者在学习408数据结构算法题过程中的一些思考和总结，大体如下</p><p>1）算法模板（快速排序等）</p><p>2）题目总结</p></blockquote><h2 id="算法模板">1）算法模板</h2><p>我认为408数据结构的算法题只有一个模板需要熟记，就是快速排序算法，其他的模板用上的概率都不大</p><h4 id="快速排序">快速排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span>(L &gt;= R) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> M = Partion(A, L, R);<br>    QuickSort(A, L, M<span class="hljs-number">-1</span>);<br>    QuickSort(A, M+<span class="hljs-number">1</span>, R);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Partion</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-type">int</span> mid = A[L];<br>    <span class="hljs-keyword">while</span>(L &lt; R) &#123;<br>        <span class="hljs-keyword">while</span>(A[R]&gt;=mid &amp;&amp; L&lt;R) R--;<br>       A[L] = A[R];<br>        <span class="hljs-keyword">while</span>(A[L]&lt;=mid &amp;&amp; L&lt;R) L++;<br>        A[R] = A[L];<br>    &#125;<br>    A[L] = mid;<br>    retruen L;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二分查找">二分查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">BinarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] A, <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = length(A), mid;<br>    <span class="hljs-keyword">while</span>(l &lt;=   r) &#123;<br>mid = (l+r)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(A[mid] == key)<br>            <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(A[mid] &gt; key) <br>            r = mid<span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">else</span> <br>            l = mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="kmp算法">KMP算法</h4><p>KMP算法分成两步，第一步先获得一个next数组，</p><figure><imgsrc="https://pic1.zhimg.com/80/v2-40b4885aace7b31499da9b90b7c46ed3_720w.webp?source=1def8aca"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>next数组实质上是部分匹配表（PMT）后移动了一位，然后将0位置设置为-1，所以除了0位置外的每一位的值都分别表示不包括这一位在内的，前面的子串的前后缀相等的最大长度，计算得到next数组的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span> *p, <span class="hljs-type">int</span> *next)</span> &#123;<br>    next[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(p)) &#123;<br>        <span class="hljs-keyword">if</span>(j == <span class="hljs-number">-1</span> || p[i] == p[j]) &#123;<br>            i++; j++;<br>            next[i] = j;<br>        &#125; <span class="hljs-keyword">else</span> <br>            j = next[j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算next数组可以看作模式串p自己和自己匹配的过程，在所有匹配中，主串的位置，也就是i，是不会前移的，一直动的只有j，如果ij第一位就不匹配，此时<code>j=next[0]</code>实质上等于<code>j=0,i++</code>，就是让i后移一位</p><figure><imgsrc="https://picx.zhimg.com/80/v2-8a1a205df5cad7ab2f07498484a54a89_720w.webp?source=1def8aca"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>KMP的具体算法其实和前面计算next数组时做的匹配是一样的，指是模式串变成了给定的另外一个模式串，匹配成功后，ij指向的是匹配串的尾部，所以需要返回<code>i-j</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">KMP</span><span class="hljs-params">(<span class="hljs-type">char</span> *t, <span class="hljs-type">char</span> *p)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span>(i &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(t) &amp;&amp; j &lt; (<span class="hljs-type">int</span>)<span class="hljs-built_in">strlen</span>(p)) &#123;<br><span class="hljs-keyword">if</span>(j == <span class="hljs-number">-1</span> || t[i] == p[j]) &#123;<br>            i++; j++<br>        &#125; <span class="hljs-keyword">else</span><br>            j = next[j];<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(j == <span class="hljs-built_in">strlen</span>(p))<br>        <span class="hljs-keyword">return</span> i - j;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="树的遍历的非递归实现">树的遍历的非递归实现</h4><h5 id="中前序遍历">中/前序遍历</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">InOrder</span><span class="hljs-params">(BiTree T)</span> &#123;<br>    InitStack(S); BiTree p = T;<br>    <span class="hljs-keyword">while</span>(p || !isEmpty(S)) &#123;<br>        <span class="hljs-keyword">if</span>(p) &#123;<br>            <span class="hljs-comment">// visit(p); 前序遍历就是把visit移动到此处</span><br>            push(S, p);<br>            p = p-&gt;lchile;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Pop(S, p); visit(p);<br>            p = p-&gt;rchild;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="后序遍历">后序遍历</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">PostOrder</span><span class="hljs-params">(BiTree T)</span> &#123;<br>    InisStack(S); BiTree p = T, r = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">while</span>(p || isEmpty(S)) &#123;<br>        <span class="hljs-keyword">if</span>(p) &#123;<br>            Push(S, p);<br>            p = p-&gt;lchild;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Top(S, p);<br>            <span class="hljs-keyword">if</span>(p-&gt;rchild &amp;&amp; p-&gt;rchild!=r)<br>                p = p-&gt;rchild<br>        <span class="hljs-keyword">else</span> &#123;<br>                Pop(S, p);<br>                visit(p);<br>                r=p;<br>                p=<span class="hljs-literal">NULL</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目总结">2）题目总结</h2><p>通过几个典型题目，记录408数据结构的算法题可能会用到的几个做题思路</p><h4 id="双指针">双指针</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指Offer 21. 调整数组顺序使奇数位于偶数前面</a></li></ol><p>一道不太典型的双指针的题，指针分别指向数组的头尾，然后交换头尾元素</p><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指Offer 52. 两个链表的第一个公共节点</a></li></ol><p><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png" /></p><p>最直接的想法肯定是算出两个链表的长度，把长链表后移，然后同时遍历，看有没有公共节点，这样时间复杂都也是O(n)，但是代码有点长，这里有一个更巧妙的解法，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode *<span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> &#123;<br>    ListNode* a = headA, *b = headB;<br>    <span class="hljs-keyword">while</span>(a != b) &#123;<br>        A = A!=nullptr?A-&gt;next:headB;<br>        B = B!=nullptr?B-&gt;next:headA;<br>    &#125;<br>    <span class="hljs-keyword">return</span> A;<br>&#125;<br></code></pre></td></tr></table></figure><p>AB链表同时遍历，遍历完自己之后，再从另一个的头开始遍历，如果存在公共节点，两者会在公共节点处相遇，如果不存在，两者会同时指向NULL</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/linked-list-cycle-ii/">142.环形链表 II</a></li></ol><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>类似的题目一般都可以拥双指针法解决，比如找环，找公共尾部，找尾部节点等，大体上都是根据双指针的关系推理出要找的点的位置，例如本题使用快慢指针，有<code>fast=2slow</code>，然后如果有环，则存在两者相遇时有，<code>fast=slow+nb</code>，所以可以求出<code>fast=2nb; slow=nb</code>，而环的入口节点的位置在<code>a+nb</code>，所以设置两个指针，从slow和头节点的位置同时后移，相遇则为环入口</p><h4 id="反转链表">反转链表</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/">剑指Offer 24. 反转链表</a></li></ol><p>注意区分一下有无头节点，无头节点就直接<code>return prev</code>，有头节点就<code>head-&gt;next=prev</code>，然后再return，除了链表，数组也可以通过双指针，一个指头一个指尾，然后换位置，直到指针交错的方式反转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">ListNode* <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode* head)</span> &#123;<br>ListNode* prev = <span class="hljs-literal">NULL</span>, *curr = head;<br>    <span class="hljs-keyword">while</span>(curr) &#123;<br>        ListNode* next = curr-&gt;next;<br>        curr-&gt;next = prev;<br>        prev = curr;<br>        curr = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空间换时间">空间换时间</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指Offer 39. 数组中出现次数超过一半的数字</a></li></ol><p>这种题（在408考试中）最直接的想法是空间换时间，通过数组来记录每个数字的个数，然后遍历这个数组，但是这个题目进了一步，题设数组中可能存在负数，这时候直接用个数组来记录就有点麻烦了，所以有两个思路，一个是那就把记录数字个数的数组换成字典，另一个就是<strong>多数（摩尔）投票法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, voteNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span>(voteNum == <span class="hljs-number">0</span>) &#123;<br>            x = nums[i];<br>            voteNum = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(x == nums[i])<br>                voteNum++;<br>            <span class="hljs-keyword">else</span><br>                voteNum--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> xNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <br>        <span class="hljs-keyword">if</span>(nums[i] == x)<br>            xNum++;<br>    <span class="hljs-keyword">if</span>(xNum &gt; stock.size()/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路比较简单，就是用一个变量x保存现在最多的元素，用voteNum保存投票数，遍历数组，<code>nums[i]==x</code>则voteNum++，否则--，如果voteNum为0，则换x，遍历完得到的x就是数组中最多的元素</p><p>#### 简单动态规划</p><p>我认为考到动态规划上面的可能性，不是不大，而是微乎其微，所以这里只记录一个极简单的动态规划题目</p><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指Offer 42. 连续子数组的最大和</a></li></ol><p>动态规划问题，首先判断子问题是什么，本题可设为以位置i结尾的数组的最大和，以此构建动态规划数组dp，有<code>dp[0]=nums[0]</code>，然后构建转移方程</p><p><span class="math display">\[dp[i] =\begin{cases}dp[i-1] + nums[i],\quad dp[i-1]\geq0\\nums[i],\qquad \qquad \qquad dp[i-1]&lt;0\end{cases}\]</span></p><p>有了子问题，初始状态和转移方程，动态规划的代码其实不难写</p><h4 id="栈和队列">栈和队列</h4><ol type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指Offer 09. 用两个栈实现队列</a></li></ol><p>我认为这种题一般不会考算法，但是可能考应用题</p><p>用两个栈实现队列，思想很简单，就是一个栈用来存数据，队列入队就直接入到这个栈里面，一个栈用来逆置后输出队首，如果输出栈为空，就把数据栈放到输出栈，否则直接输出输出栈首</p><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指Offer 30. 包含min函数的栈</a></li></ol><p>同样，这个题也是可能考应用题</p><p>也是用两个栈来实现，一个栈做正常的栈，另一个栈保存最小元素，当检测到最小元素的栈为空或者栈顶的值大于当前入栈的值时，最小栈和正常栈同时入栈，当检测到两个栈顶为相同元素时，两个栈同时出栈</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指Offer 59 - I. 滑动窗口的最大值</a></li></ol><p>这个倒是可能考算法题了，只是难度有点大了，实际上最优解需要用到<strong>单调队列</strong>，我猜这属于超纲内容</p><p>在考纲内的想法是构造一个大根堆，滑动窗口每次右移时，判断堆顶元素是否在窗口中，如果不再则移出，这种方法的时间复杂度为<code>O(nlogn)</code></p><p>单调队列是一种主要用于解决滑动窗口类问题的数据结构，其实就是对于一个数组维护了一个双向队列，遍历数组，同时在队列内保持单调（递增或者递减），为了做到这一点，遍历到每个数时，判断其是否大于（或者小于）队列尾部的数，如果是，则队列尾部出队，直到不满足</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">maxSlidingWindow</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>    deque&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;=nums[q.<span class="hljs-built_in">back</span>()])<br>        q.<span class="hljs-built_in">pop_back</span>();<br>    q.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; ans = &#123;nums[q.<span class="hljs-built_in">front</span>()]&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k; i &lt; len; i++) &#123;<br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;=nums[q.<span class="hljs-built_in">back</span>()])<br>            q.<span class="hljs-built_in">pop_back</span>();<br>        q.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">if</span>(q.<span class="hljs-built_in">front</span>() &lt;= i-k)<br>            q.<span class="hljs-built_in">pop_front</span>();<br>        ans.push_back[nums[q.<span class="hljs-built_in">front</span>()]];<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="树">树</h4><ol type="1"><li>王道24模拟卷一 树的根节点到给定节点间的路径</li></ol><p>我认为不大可能考这种算法，因为没有区分度，不能按照不同的答法给出不同的分数</p><p>王道的答案是后序遍历的非递归实现，到给定节点时，栈中恰好是根节点到给定节点的路线，具体实现见上一节后序遍历非递归实现的模板，其实递归实现更简单，只需要借助一个栈结构来保存路径上的节点，给出如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最后栈中保存的就是路径</span><br>InitStack(S);<br><span class="hljs-type">int</span> <span class="hljs-title function_">findTreePath</span><span class="hljs-params">(BiTree T, <span class="hljs-type">int</span> val)</span> &#123;<br><span class="hljs-keyword">if</span>(T == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Push(S, T);<br>    <span class="hljs-keyword">if</span>(T-&gt;data == val) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(T-&gt;lchild != <span class="hljs-literal">NULL</span>) flag = findTreePath(T-&gt;lchild, val);<br>    <span class="hljs-keyword">if</span>(!flag &amp;&amp; T-&gt;rchild != <span class="hljs-literal">NULL</span>) flag = findTreePath(T-&gt;rchild, val);<br>    <span class="hljs-keyword">if</span>(!flag) Pop(S);<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指Offer 27. 二叉树的镜像</a></li></ol><p>很简单，在基本的递归模板上，将访问操作修改为交换左右子树即可</p><ol start="3" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指Offer 28. 对称的二叉树</a></li></ol><p>递归传入的是同层的两个子树，并用于判断两个子树是否互为镜像，当两个子树都为空时返回true，一个为空或者两者的值不相等时返回false，不然就继续判断两个子树下一层的四个子树对应位置是否成镜像</p><ol start="4" type="1"><li><ahref="https://link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/er-cha-shu-zhong-he-wei-mou-yi-zhi-de-lu-jing-lcof/">剑指Offer 34. 二叉树中和为某一值的路径</a></li></ol><h3 id="参考">参考</h3><p>[1] <ahref="https://zhuanlan.zhihu.com/p/286811053">408数据结构-算法题专烂栏</a></p><p>[2] <ahref="https://www.zhihu.com/question/21923021">知乎-如何更好地理解和掌握KMP算法？</a></p><p>[3] <ahref="https://www.cnblogs.com/neuzk/p/9486730.html">树的根节点到给定节点间的路径</a></p><p>[4] <ahref="https://zhuanlan.zhihu.com/p/346354943">算法学习笔记(66):单调队列</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github博客系统搭建流程记录</title>
    <link href="/2023/11/09/How-to-Use-Hexo/"/>
    <url>/2023/11/09/How-to-Use-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo-github博客系统搭建流程记录">Hexo +Github博客系统搭建流程记录</h1><blockquote><p>本文将简要记录利用Hexo和Github搭建自己博客系统的流程，包含以下内容</p><ol type="1"><li>Hexo的下载和使用</li><li>Hexo主题更换</li><li>Github部署Hexo博客</li></ol></blockquote><h2 id="hexo的下载和使用">1) Hexo的下载和使用</h2><p>其实跟着<ahref="https://hexo.io/zh-cn/docs/setup">Hexo</a>的文档就行了，我的下载和使用过程也没有遇到什么大问题，所以简要记录流程如下</p><ol type="1"><li>安装</li></ol><p>先安装<strong>Git</strong>和<strong>Node.js</strong>，然后利用npm安装<strong>Hexo</strong></p><p><code>$ npm install -g hexo-cli</code></p><ol start="2" type="1"><li>建站</li></ol><p>创建一个空文件夹<code>folder</code>，在该文件夹下执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li>配置</li></ol><p>对照Hexo文档的<ahref="https://hexo.io/zh-cn/docs/configuration">配置页面</a>更改<code>&lt;folder&gt;</code>下的配置文件<code>_config.yml</code></p><ol start="4" type="1"><li>使用</li></ol><p><strong>Hexo</strong>的命令比较少，较为常用的只有以下几个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;     <span class="hljs-comment"># 新建文章</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server                   <span class="hljs-comment"># 开启本地服务器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo deploy     <span class="hljs-comment"># 清除缓存和生成的静态文件 &amp;&amp; 部署</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo list &lt;<span class="hljs-built_in">type</span>&gt;              <span class="hljs-comment"># 列出网站数据</span></span><br></code></pre></td></tr></table></figure><p>在<code>hexo new</code>出一篇文章后，<code>source/_post/</code>下会出现对应layout的markdown文件，文件包含Front-matter部分，举例如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2023/11/23 20:10:10<br>tags:<br><span class="hljs-bullet">-</span> Tool<br><span class="hljs-section">- How to use</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>在Front-matter的后面编写博客即可</p><h2 id="hexo主题更换">2）Hexo主题更换</h2><p>我选择了使用<ahref="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，并依照其参考文档进行了设置，没有遇到问题</p><h2 id="github部署hexo博客">3）Github部署Hexo博客</h2><ol type="1"><li>在Github中创建名为<code>&lt;username&gt;.github.io</code>的仓库</li><li>安装hexo-deployer-git工具</li></ol><p><code>$ npm install hexo-deployer-git --save</code></p><ol start="3" type="1"><li>修改<code>_config.yml</code>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br><span class="hljs-attr">barnch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li>执行<code>hexo clean &amp;&amp; hexo d</code></li></ol><p>此处需要注意，在<code>hexo d</code>后，输入用户名和token，token需要在Github-setting-development下生成</p><ol start="5" type="1"><li>然后就可以通过<code>https://&lt;username&gt;.github.io</code>访问博客了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>How to Use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
