<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>408 数据结构算法题总结</title>
    <link href="/2023/11/11/408-Data-Struce-algorithm-Learn/"/>
    <url>/2023/11/11/408-Data-Struce-algorithm-Learn/</url>
    
    <content type="html"><![CDATA[<h1 id="408-数据结构算法题总结"><a href="#408-数据结构算法题总结" class="headerlink" title="408 数据结构算法题总结"></a>408 数据结构算法题总结</h1><blockquote><p>本文记录笔者在学习408数据结构算法题过程中的一些思考和总结，大体如下</p><p>1）算法模板（快速排序等）</p><p>2）题目总结</p></blockquote><h2 id="1）算法模板"><a href="#1）算法模板" class="headerlink" title="1）算法模板"></a>1）算法模板</h2><p>我认为408数据结构的算法题只有一个模板需要熟记，就是快速排序算法，其他的模板用上的概率都不大</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">QuickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span>(L &gt;= R) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> M = Partion(A, L, R);<br>    QuickSort(A, L, M<span class="hljs-number">-1</span>);<br>    QuickSort(A, M+<span class="hljs-number">1</span>, R);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">Partion</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-type">int</span> mid = A[L];<br>    <span class="hljs-keyword">while</span>(L &lt; R) &#123;<br>        <span class="hljs-keyword">while</span>(A[R]&gt;=mid &amp;&amp; L&lt;R) R--;<br>       A[L] = A[R];<br>        <span class="hljs-keyword">while</span>(A[L]&lt;=mid &amp;&amp; L&lt;R) L++;<br>        A[R] = A[L];<br>    &#125;<br>    A[L] = mid;<br>    retruen L;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c">```<br><br>## <span class="hljs-number">2</span>）题目总结<br><br>通过几个典型题目，记录<span class="hljs-number">408</span>数据结构的算法题可能会用到的几个做题思路<br><br>#### 双指针<br><br><span class="hljs-number">1.</span> [剑指 Offer <span class="hljs-number">21.</span> 调整数组顺序使奇数位于偶数前面](https:<span class="hljs-comment">//link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/)</span><br><br> 一道不太典型的双指针的题，指针分别指向数组的头尾，然后交换头尾元素<br><br><span class="hljs-number">2.</span> [剑指 Offer <span class="hljs-number">52.</span> 两个链表的第一个公共节点](https:<span class="hljs-comment">//link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/)</span><br><br>![](https:<span class="hljs-comment">//assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png)</span><br><br><br><br>#### 反转链表<br><br><span class="hljs-number">1.</span> [剑指 Offer <span class="hljs-number">24.</span> 反转链表](https:<span class="hljs-comment">//link.zhihu.com/?target=https%3A//leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/)</span><br><br>注意区分一下有无头节点，无头节点就直接`<span class="hljs-keyword">return</span> prev`，有头节点就`head-&gt;next=prev`，然后再<span class="hljs-keyword">return</span>，除了链表，数组也可以通过双指针，一个指头一个指尾，然后换位置，直到指针交错的方式反转<br><br>```c++<br>ListNode* reverseList(ListNode* head) &#123;<br>ListNode* prev = <span class="hljs-literal">NULL</span>, *curr = head;<br>    <span class="hljs-keyword">while</span>(curr) &#123;<br>        ListNode* next = curr-&gt;next;<br>        curr-&gt;next = prev;<br>        prev = curr;<br>        curr = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="空间换时间"><a href="#空间换时间" class="headerlink" title="空间换时间"></a>空间换时间</h4><ol><li><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半的数字</a></li></ol><p>这种题（在408考试中）最直接的想法是空间换时间，通过数组来记录每个数字的个数，然后遍历这个数组，但是这个题目进了一步，题设数组中可能存在负数，这时候直接用个数组来记录就有点麻烦了，所以有两个思路，一个是那就把记录数字个数的数组换成字典，另一个就是<strong>多数（摩尔）投票法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span> nums[], <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, voteNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">if</span>(voteNum == <span class="hljs-number">0</span>) &#123;<br>            x = nums[i];<br>            voteNum = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(x == nums[i])<br>                voteNum++;<br>            <span class="hljs-keyword">else</span><br>                voteNum--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> xNum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) <br>        <span class="hljs-keyword">if</span>(nums[i] == x)<br>            xNum++;<br>    <span class="hljs-keyword">if</span>(xNum &gt; stock.size()/<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>思路比较简单，就是用一个变量x保存现在最多的元素，用voteNum保存投票数，遍历数组，<code>nums[i]==x</code>则voteNum++，否则–，如果voteNum为0，则换x，遍历完得到的x就是数组中最多的元素</p><h4 id="简单动态规划"><a href="#简单动态规划" class="headerlink" title="简单动态规划"></a>简单动态规划</h4><p>我认为考到动态规划上面的可能性，不是不大，而是微乎其微，所以这里只记录一个极简单的动态规划题目</p><ol><li><a href="https://link.zhihu.com/?target=https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></li></ol><p>动态规划问题，首先判断子问题是什么，本题可设为以位置i结尾的数组的最大和，以此构建动态规划数组dp，有<code>dp[0]=nums[0]</code>，然后构建转移方程<br>$$<br>dp[i] &#x3D;<br>\begin{cases}<br>dp[i-1] + nums[i],\quad dp[i-1]\geq0\<br>nums[i],\qquad \qquad \qquad dp[i-1]&lt;0<br>\end{cases}<br>$$<br>有了子问题，初始状态和转移方程，动态规划的代码其实不难写</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p> [1] <a href="https://zhuanlan.zhihu.com/p/286811053">408数据结构-算法题专烂栏</a></p><p> [2] </p>]]></content>
    
    
    
    <tags>
      
      <tag>408</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo + Github博客系统搭建流程记录</title>
    <link href="/2023/11/09/How-to-Use-Hexo/"/>
    <url>/2023/11/09/How-to-Use-Hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github博客系统搭建流程记录"><a href="#Hexo-Github博客系统搭建流程记录" class="headerlink" title="Hexo + Github博客系统搭建流程记录"></a>Hexo + Github博客系统搭建流程记录</h1><blockquote><p>本文将简要记录利用Hexo和Github搭建自己博客系统的流程，包含以下内容</p><ol><li>Hexo的下载和使用</li><li>Hexo主题更换 </li><li>Github部署Hexo博客</li></ol></blockquote><h2 id="1-Hexo的下载和使用"><a href="#1-Hexo的下载和使用" class="headerlink" title="1) Hexo的下载和使用"></a>1) Hexo的下载和使用</h2><p>其实跟着<a href="https://hexo.io/zh-cn/docs/setup">Hexo</a>的文档就行了，我的下载和使用过程也没有遇到什么大问题，所以简要记录流程如下</p><ol><li>安装</li></ol><p>先安装<strong>Git</strong>和<strong>Node.js</strong>，然后利用npm安装<strong>Hexo</strong></p><p><code>$ npm install -g hexo-cli</code></p><ol start="2"><li>建站</li></ol><p> 创建一个空文件夹<code>folder</code>，在该文件夹下执行如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo init &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install</span><br></code></pre></td></tr></table></figure><ol start="3"><li>配置</li></ol><p>对照Hexo文档的<a href="https://hexo.io/zh-cn/docs/configuration">配置页面</a>更改<code>&lt;folder&gt;</code>下的配置文件<code>_config.yml</code></p><ol start="4"><li>使用</li></ol><p><strong>Hexo</strong>的命令比较少，较为常用的只有以下几个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo new [layout] &lt;title&gt;     <span class="hljs-comment"># 新建文章</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo server                   <span class="hljs-comment"># 开启本地服务器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo deploy     <span class="hljs-comment"># 清除缓存和生成的静态文件 &amp;&amp; 部署</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">hexo list &lt;<span class="hljs-built_in">type</span>&gt;              <span class="hljs-comment"># 列出网站数据</span></span><br></code></pre></td></tr></table></figure><p> 在<code>hexo new</code>出一篇文章后，<code>source/_post/</code>下会出现对应layout的markdown文件，文件包含Front-matter部分，举例如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: Hello World<br>date: 2023/11/23 20:10:10<br>tags:<br><span class="hljs-bullet">-</span> Tool<br><span class="hljs-section">- How to use</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>在Front-matter的后面编写博客即可</p><h2 id="2）Hexo主题更换"><a href="#2）Hexo主题更换" class="headerlink" title="2）Hexo主题更换"></a>2）Hexo主题更换</h2><p>我选择了使用<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>主题，并依照其参考文档进行了设置，没有遇到问题</p><h2 id="3）Github部署Hexo博客"><a href="#3）Github部署Hexo博客" class="headerlink" title="3）Github部署Hexo博客"></a>3）Github部署Hexo博客</h2><ol><li>在Github中创建名为<code>&lt;username&gt;.github.io</code>的仓库</li><li>安装hexo-deployer-git工具</li></ol><p><code>$ npm install hexo-deployer-git --save</code></p><ol start="3"><li>修改<code>_config.yml</code>配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br><span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br><span class="hljs-attr">barnch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><ol start="4"><li>执行<code>hexo clean &amp;&amp; hexo d</code></li></ol><p>此处需要注意，在<code>hexo d</code>后，输入用户名和token，token需要在Github-setting-development下生成</p><ol start="5"><li>然后就可以通过<code>https://&lt;username&gt;.github.io</code>访问博客了</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Tool</tag>
      
      <tag>How to Use</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
